services:
  raw_data:
    build:
      context: .
      dockerfile: raw_data/Dockerfile
    hostname: raw_data
    depends_on:
      db_postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "50051:50051"
    volumes:
      - ./raw_data/src/raw_data:/app/raw_data
      - ./common:/app/common
    command: watchmedo auto-restart --recursive --pattern="*.py" --directory="/app/" -- python -m raw_data.main

  # rules:
  #   build:
  #     context: .
  #     dockerfile: rules/Dockerfile
  #   hostname: rules
  #   depends_on:
  #     db_postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   ports:
  #     - "8100:8000"
  #   volumes:
  #     - ./rules/src/rules:/app/rules
  #     - ./common:/app/common

  # positions:
  #   build:
  #     context: .
  #     dockerfile: positions/Dockerfile
  #   hostname: positions
  #   depends_on:
  #     db_postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   ports:
  #     - "8200:8000"
  #   volumes:
  #     - ./positions/src/positions:/app/positions
  #     - ./common:/app/common

  # forecast:
  #   build:
  #     context: .
  #     dockerfile: forecast/Dockerfile
  #   hostname: forecast
  #   depends_on:
  #     db_postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   ports:
  #     - "8300:8000"
  #   volumes:
  #     - ./forecast/src/forecast:/app/forecast
  #     - ./common:/app/common

  db_postgres:
    image: timescale/timescaledb:latest-pg16
    hostname: ${DB_HOST}
    restart: on-failure
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - db-postgres:/var/lib/postgresql/data
      - ./database/data:/data:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    hostname: redis
    restart: always
    ports:
      - 6380:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db-postgres:
    driver: local
  redis:
    driver: local