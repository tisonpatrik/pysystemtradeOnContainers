"""Update models

Revision ID: fdaf919f283a
Revises: 41c0ecf116d8
Create Date: 2024-03-15 20:56:28.276690

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes



# revision identifiers, used by Alembic.
revision: str = 'fdaf919f283a'
down_revision: Union[str, None] = '41c0ecf116d8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dailyvolnormalisedpriceforassetclass',
    sa.Column('date_time', sa.DateTime(), nullable=False),
    sa.Column('asset_clas', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('normalized_volatility', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('date_time')
    )
    op.create_table('fxprices',
    sa.Column('date_time', sa.DateTime(), nullable=False),
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('date_time')
    )
    op.create_table('instrumentconfig',
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('pointsize', sa.Float(), nullable=False),
    sa.Column('currency', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('asset_class', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('per_block', sa.Float(), nullable=False),
    sa.Column('percentage', sa.Float(), nullable=False),
    sa.Column('per_trade', sa.Integer(), nullable=False),
    sa.Column('region', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('symbol')
    )
    op.create_table('adjustedprices',
    sa.Column('date_time', sa.DateTime(), nullable=False),
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['symbol'], ['instrumentconfig.symbol'], ),
    sa.PrimaryKeyConstraint('date_time', 'symbol')
    )
    op.create_table('dailyreturnsvolatility',
    sa.Column('date_time', sa.DateTime(), nullable=False),
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('daily_returns_volatility', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['symbol'], ['instrumentconfig.symbol'], ),
    sa.PrimaryKeyConstraint('date_time', 'symbol')
    )
    op.create_table('dailyvolnormalizedreturns',
    sa.Column('date_time', sa.DateTime(), nullable=False),
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('normalized_volatility', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['symbol'], ['instrumentconfig.symbol'], ),
    sa.PrimaryKeyConstraint('date_time', 'symbol')
    )
    op.create_table('instrumentmetadata',
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('asset_class', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sub_class', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['symbol'], ['instrumentconfig.symbol'], ),
    sa.PrimaryKeyConstraint('symbol')
    )
    op.create_table('instrumentvolatility',
    sa.Column('date_time', sa.DateTime(), nullable=False),
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('instrument_volatility', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['symbol'], ['instrumentconfig.symbol'], ),
    sa.PrimaryKeyConstraint('date_time', 'symbol')
    )
    op.create_table('multipleprices',
    sa.Column('date_time', sa.DateTime(), nullable=False),
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('carry', sa.Float(), nullable=False),
    sa.Column('carry_contract', sa.Integer(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('price_contract', sa.Integer(), nullable=False),
    sa.Column('forward', sa.Float(), nullable=False),
    sa.Column('forward_contract', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['symbol'], ['instrumentconfig.symbol'], ),
    sa.PrimaryKeyConstraint('date_time', 'symbol')
    )
    op.create_table('rollcalendars',
    sa.Column('date_time', sa.DateTime(), nullable=False),
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('current_contract', sa.Integer(), nullable=False),
    sa.Column('next_contract', sa.Integer(), nullable=False),
    sa.Column('carry_contract', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['symbol'], ['instrumentconfig.symbol'], ),
    sa.PrimaryKeyConstraint('date_time', 'symbol')
    )
    op.create_table('rollconfig',
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('hold_roll_cycle', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('roll_offset_days', sa.Integer(), nullable=False),
    sa.Column('carry_offset', sa.Integer(), nullable=False),
    sa.Column('priced_roll_cycle', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('expiry_offset', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['symbol'], ['instrumentconfig.symbol'], ),
    sa.PrimaryKeyConstraint('symbol')
    )
    op.create_table('spreadcosts',
    sa.Column('symbol', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('spread_costs', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['symbol'], ['instrumentconfig.symbol'], ),
    sa.PrimaryKeyConstraint('symbol')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('spreadcosts')
    op.drop_table('rollconfig')
    op.drop_table('rollcalendars')
    op.drop_table('multipleprices')
    op.drop_table('instrumentvolatility')
    op.drop_table('instrumentmetadata')
    op.drop_table('dailyvolnormalizedreturns')
    op.drop_table('dailyreturnsvolatility')
    op.drop_table('adjustedprices')
    op.drop_table('instrumentconfig')
    op.drop_table('fxprices')
    op.drop_table('dailyvolnormalisedpriceforassetclass')
    # ### end Alembic commands ###
