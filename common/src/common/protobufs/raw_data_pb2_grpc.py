# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import raw_data_pb2 as raw__data__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in raw_data_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SmoothCarryStub(object):
    """--------------------
    Services
    --------------------

    SmoothCarry service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_smooth_carry = channel.unary_unary(
                '/raw_data.SmoothCarry/get_smooth_carry',
                request_serializer=raw__data__pb2.SmoothCarryRequest.SerializeToString,
                response_deserializer=raw__data__pb2.SmoothCarryResponse.FromString,
                _registered_method=True)


class SmoothCarryServicer(object):
    """--------------------
    Services
    --------------------

    SmoothCarry service
    """

    def get_smooth_carry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SmoothCarryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_smooth_carry': grpc.unary_unary_rpc_method_handler(
                    servicer.get_smooth_carry,
                    request_deserializer=raw__data__pb2.SmoothCarryRequest.FromString,
                    response_serializer=raw__data__pb2.SmoothCarryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raw_data.SmoothCarry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raw_data.SmoothCarry', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SmoothCarry(object):
    """--------------------
    Services
    --------------------

    SmoothCarry service
    """

    @staticmethod
    def get_smooth_carry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raw_data.SmoothCarry/get_smooth_carry',
            raw__data__pb2.SmoothCarryRequest.SerializeToString,
            raw__data__pb2.SmoothCarryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class VolAttenuationStub(object):
    """VolAttenuation service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_vol_attenuation = channel.unary_unary(
                '/raw_data.VolAttenuation/get_vol_attenuation',
                request_serializer=raw__data__pb2.VolAttenuationRequest.SerializeToString,
                response_deserializer=raw__data__pb2.VolAttenuationResponse.FromString,
                _registered_method=True)


class VolAttenuationServicer(object):
    """VolAttenuation service
    """

    def get_vol_attenuation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VolAttenuationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_vol_attenuation': grpc.unary_unary_rpc_method_handler(
                    servicer.get_vol_attenuation,
                    request_deserializer=raw__data__pb2.VolAttenuationRequest.FromString,
                    response_serializer=raw__data__pb2.VolAttenuationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raw_data.VolAttenuation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raw_data.VolAttenuation', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VolAttenuation(object):
    """VolAttenuation service
    """

    @staticmethod
    def get_vol_attenuation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raw_data.VolAttenuation/get_vol_attenuation',
            raw__data__pb2.VolAttenuationRequest.SerializeToString,
            raw__data__pb2.VolAttenuationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class FxPricesStub(object):
    """FxPrices service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_fx_prices = channel.unary_unary(
                '/raw_data.FxPrices/get_fx_prices',
                request_serializer=raw__data__pb2.FxPricesRequest.SerializeToString,
                response_deserializer=raw__data__pb2.FxPricesResponse.FromString,
                _registered_method=True)


class FxPricesServicer(object):
    """FxPrices service
    """

    def get_fx_prices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FxPricesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_fx_prices': grpc.unary_unary_rpc_method_handler(
                    servicer.get_fx_prices,
                    request_deserializer=raw__data__pb2.FxPricesRequest.FromString,
                    response_serializer=raw__data__pb2.FxPricesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raw_data.FxPrices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raw_data.FxPrices', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FxPrices(object):
    """FxPrices service
    """

    @staticmethod
    def get_fx_prices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raw_data.FxPrices/get_fx_prices',
            raw__data__pb2.FxPricesRequest.SerializeToString,
            raw__data__pb2.FxPricesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class InstrumentCurrencyVolStub(object):
    """InstrumentCurrencyVol service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_instrument_currency_vol = channel.unary_unary(
                '/raw_data.InstrumentCurrencyVol/get_instrument_currency_vol',
                request_serializer=raw__data__pb2.InstrumentCurrencyVolRequest.SerializeToString,
                response_deserializer=raw__data__pb2.InstrumentCurrencyVolResponse.FromString,
                _registered_method=True)


class InstrumentCurrencyVolServicer(object):
    """InstrumentCurrencyVol service
    """

    def get_instrument_currency_vol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InstrumentCurrencyVolServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_instrument_currency_vol': grpc.unary_unary_rpc_method_handler(
                    servicer.get_instrument_currency_vol,
                    request_deserializer=raw__data__pb2.InstrumentCurrencyVolRequest.FromString,
                    response_serializer=raw__data__pb2.InstrumentCurrencyVolResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raw_data.InstrumentCurrencyVol', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raw_data.InstrumentCurrencyVol', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class InstrumentCurrencyVol(object):
    """InstrumentCurrencyVol service
    """

    @staticmethod
    def get_instrument_currency_vol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raw_data.InstrumentCurrencyVol/get_instrument_currency_vol',
            raw__data__pb2.InstrumentCurrencyVolRequest.SerializeToString,
            raw__data__pb2.InstrumentCurrencyVolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MedianCarryStub(object):
    """MedianCarry service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_median_carry = channel.unary_unary(
                '/raw_data.MedianCarry/get_median_carry',
                request_serializer=raw__data__pb2.MedianCarryRequest.SerializeToString,
                response_deserializer=raw__data__pb2.MedianCarryResponse.FromString,
                _registered_method=True)


class MedianCarryServicer(object):
    """MedianCarry service
    """

    def get_median_carry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MedianCarryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_median_carry': grpc.unary_unary_rpc_method_handler(
                    servicer.get_median_carry,
                    request_deserializer=raw__data__pb2.MedianCarryRequest.FromString,
                    response_serializer=raw__data__pb2.MedianCarryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raw_data.MedianCarry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raw_data.MedianCarry', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MedianCarry(object):
    """MedianCarry service
    """

    @staticmethod
    def get_median_carry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raw_data.MedianCarry/get_median_carry',
            raw__data__pb2.MedianCarryRequest.SerializeToString,
            raw__data__pb2.MedianCarryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NormalizedPricesStub(object):
    """NormalizedPrices service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_normalized_prices = channel.unary_unary(
                '/raw_data.NormalizedPrices/get_normalized_prices',
                request_serializer=raw__data__pb2.NormalizedPricesRequest.SerializeToString,
                response_deserializer=raw__data__pb2.NormalizedPricesResponse.FromString,
                _registered_method=True)


class NormalizedPricesServicer(object):
    """NormalizedPrices service
    """

    def get_normalized_prices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NormalizedPricesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_normalized_prices': grpc.unary_unary_rpc_method_handler(
                    servicer.get_normalized_prices,
                    request_deserializer=raw__data__pb2.NormalizedPricesRequest.FromString,
                    response_serializer=raw__data__pb2.NormalizedPricesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raw_data.NormalizedPrices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raw_data.NormalizedPrices', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NormalizedPrices(object):
    """NormalizedPrices service
    """

    @staticmethod
    def get_normalized_prices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raw_data.NormalizedPrices/get_normalized_prices',
            raw__data__pb2.NormalizedPricesRequest.SerializeToString,
            raw__data__pb2.NormalizedPricesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RawCarryStub(object):
    """RawCarry service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_raw_carry = channel.unary_unary(
                '/raw_data.RawCarry/get_raw_carry',
                request_serializer=raw__data__pb2.RawCarryRequest.SerializeToString,
                response_deserializer=raw__data__pb2.RawCarryResponse.FromString,
                _registered_method=True)


class RawCarryServicer(object):
    """RawCarry service
    """

    def get_raw_carry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RawCarryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_raw_carry': grpc.unary_unary_rpc_method_handler(
                    servicer.get_raw_carry,
                    request_deserializer=raw__data__pb2.RawCarryRequest.FromString,
                    response_serializer=raw__data__pb2.RawCarryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raw_data.RawCarry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raw_data.RawCarry', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RawCarry(object):
    """RawCarry service
    """

    @staticmethod
    def get_raw_carry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raw_data.RawCarry/get_raw_carry',
            raw__data__pb2.RawCarryRequest.SerializeToString,
            raw__data__pb2.RawCarryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RelativeSkewDeviationStub(object):
    """RelativeSkewDeviation service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_relative_skew_deviation = channel.unary_unary(
                '/raw_data.RelativeSkewDeviation/get_relative_skew_deviation',
                request_serializer=raw__data__pb2.RelativeSkewDeviationRequest.SerializeToString,
                response_deserializer=raw__data__pb2.RelativeSkewDeviationResponse.FromString,
                _registered_method=True)


class RelativeSkewDeviationServicer(object):
    """RelativeSkewDeviation service
    """

    def get_relative_skew_deviation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RelativeSkewDeviationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_relative_skew_deviation': grpc.unary_unary_rpc_method_handler(
                    servicer.get_relative_skew_deviation,
                    request_deserializer=raw__data__pb2.RelativeSkewDeviationRequest.FromString,
                    response_serializer=raw__data__pb2.RelativeSkewDeviationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raw_data.RelativeSkewDeviation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raw_data.RelativeSkewDeviation', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RelativeSkewDeviation(object):
    """RelativeSkewDeviation service
    """

    @staticmethod
    def get_relative_skew_deviation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raw_data.RelativeSkewDeviation/get_relative_skew_deviation',
            raw__data__pb2.RelativeSkewDeviationRequest.SerializeToString,
            raw__data__pb2.RelativeSkewDeviationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AbsoluteSkewDeviationStub(object):
    """AbsoluteSkewDeviation service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_absolute_skew_deviation = channel.unary_unary(
                '/raw_data.AbsoluteSkewDeviation/get_absolute_skew_deviation',
                request_serializer=raw__data__pb2.AbsoluteSkewDeviationRequest.SerializeToString,
                response_deserializer=raw__data__pb2.AbsoluteSkewDeviationResponse.FromString,
                _registered_method=True)


class AbsoluteSkewDeviationServicer(object):
    """AbsoluteSkewDeviation service
    """

    def get_absolute_skew_deviation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AbsoluteSkewDeviationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_absolute_skew_deviation': grpc.unary_unary_rpc_method_handler(
                    servicer.get_absolute_skew_deviation,
                    request_deserializer=raw__data__pb2.AbsoluteSkewDeviationRequest.FromString,
                    response_serializer=raw__data__pb2.AbsoluteSkewDeviationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raw_data.AbsoluteSkewDeviation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raw_data.AbsoluteSkewDeviation', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AbsoluteSkewDeviation(object):
    """AbsoluteSkewDeviation service
    """

    @staticmethod
    def get_absolute_skew_deviation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raw_data.AbsoluteSkewDeviation/get_absolute_skew_deviation',
            raw__data__pb2.AbsoluteSkewDeviationRequest.SerializeToString,
            raw__data__pb2.AbsoluteSkewDeviationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CumulativeDailyVolNormReturnsStub(object):
    """CumulativeDailyVolNormReturns service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_cumulative_daily_vol_norm_returns = channel.unary_unary(
                '/raw_data.CumulativeDailyVolNormReturns/get_cumulative_daily_vol_norm_returns',
                request_serializer=raw__data__pb2.CumulativeDailyVolNormReturnsRequest.SerializeToString,
                response_deserializer=raw__data__pb2.CumulativeDailyVolNormReturnsResponse.FromString,
                _registered_method=True)


class CumulativeDailyVolNormReturnsServicer(object):
    """CumulativeDailyVolNormReturns service
    """

    def get_cumulative_daily_vol_norm_returns(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CumulativeDailyVolNormReturnsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_cumulative_daily_vol_norm_returns': grpc.unary_unary_rpc_method_handler(
                    servicer.get_cumulative_daily_vol_norm_returns,
                    request_deserializer=raw__data__pb2.CumulativeDailyVolNormReturnsRequest.FromString,
                    response_serializer=raw__data__pb2.CumulativeDailyVolNormReturnsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raw_data.CumulativeDailyVolNormReturns', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raw_data.CumulativeDailyVolNormReturns', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CumulativeDailyVolNormReturns(object):
    """CumulativeDailyVolNormReturns service
    """

    @staticmethod
    def get_cumulative_daily_vol_norm_returns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raw_data.CumulativeDailyVolNormReturns/get_cumulative_daily_vol_norm_returns',
            raw__data__pb2.CumulativeDailyVolNormReturnsRequest.SerializeToString,
            raw__data__pb2.CumulativeDailyVolNormReturnsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DailyReturnsVolStub(object):
    """DailyReturnsVol service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_daily_returns_vol = channel.unary_unary(
                '/raw_data.DailyReturnsVol/get_daily_returns_vol',
                request_serializer=raw__data__pb2.DailyReturnsVolRequest.SerializeToString,
                response_deserializer=raw__data__pb2.DailyReturnsVolResponse.FromString,
                _registered_method=True)


class DailyReturnsVolServicer(object):
    """DailyReturnsVol service
    """

    def get_daily_returns_vol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DailyReturnsVolServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_daily_returns_vol': grpc.unary_unary_rpc_method_handler(
                    servicer.get_daily_returns_vol,
                    request_deserializer=raw__data__pb2.DailyReturnsVolRequest.FromString,
                    response_serializer=raw__data__pb2.DailyReturnsVolResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'raw_data.DailyReturnsVol', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('raw_data.DailyReturnsVol', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DailyReturnsVol(object):
    """DailyReturnsVol service
    """

    @staticmethod
    def get_daily_returns_vol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/raw_data.DailyReturnsVol/get_daily_returns_vol',
            raw__data__pb2.DailyReturnsVolRequest.SerializeToString,
            raw__data__pb2.DailyReturnsVolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
