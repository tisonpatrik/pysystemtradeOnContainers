app:
  name: grayfox_forecast
  # Description: 'grayfox_forecast' is a meticulously engineered application utilizing AWS Step Functions to perform a series of operations: ingest time series data, process it according to specific rules, and subsequently store the processed data.

components:
  - data_input:
      name: multiple_prices_table # This is the receptacle for incoming time series data. Each new entry is a trigger for the processing pipeline.

  - stream_trigger:
      name: multiple_prices_table_stream # This acts as the initial spark for the data processing sequence. It's activated each time a new time series entry lands in 'multiple_prices_table'.
      type: stream
      source: multiple_prices_table
      on_event: on_item_insert

  - input_parser_function:
      name: input_parser_lambda # An AWS Lambda function that retrieves the most recent 730 entries from the 'multiple_prices_table', arranges them in chronological order, and sets the 'data_processing_workflow' Step Function into motion.
      type: function
      input: multiple_prices_table_stream
      action: invoke_step_function

  - orchestration:
      name: data_processing_workflow # The conductor of data processing operations. Its role includes managing the parallel processing of different rule variants and ensuring data is ready for storage.
      type: state_machine
      states:
        - rule_processing: # This state enables efficient rule application by processing different rule variants in parallel, thereby maximizing performance.
            type: parallel
            branches: 
              - type: task
                function: rule_function # This function embodies the logic of a particular rule variant. It takes the necessary input parameters and processes the data accordingly.
                error_handling:
                  retries: 3
                  timeout: 300
        - save_data: # This state is responsible for preserving the processed data by storing it in the 'forecast_table'.
            type: task
            function: save_to_forecast_table_function
            error_handling:
              retries: 3
              timeout: 300

  - data_output:
      name: forecast_table # The destination for processed data. Each row represents the result of a rule application on a time series entry.
      type: database_table

  - functions:
      - name: input_parser_lambda # Parses the incoming time series data, preparing it for the application of rules.
        type: code
        runtime: python
      - name: rule_function # Breathes life into the rules. It takes specific input parameters and applies the appropriate rule logic to the data.
        type: code
        runtime: python
      - name: save_to_forecast_table_function # The final step in the data journey. This function ensures the processed data is stored correctly and efficiently in the 'forecast_table'.
        type: code
        runtime: python

  - monitoring:
      name: monitoring_service # The watchdog. It monitors the application's health, performance, and tracks potential issues.
      type: monitoring_tool

# Example of input for the Step Function:
# {
#    "instrument": "Instrument_1",
#    "rules": [
#        {
#            "rule_1": [parameters],
#            "rule_2": [parameters],
#            // more rules here..
#        }
#    ],
#    "data": [
#      {
#        "unix_datetime": 1627474800,
#        "price": 100.5,
#        "forward": 1.02
#      }
#    ]
# }
# Note: Different rule variants are handled concurrently within the Step Function, enabling a high-performance, efficient processing pipeline.
